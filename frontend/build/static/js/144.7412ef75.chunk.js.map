{"version":3,"file":"static/js/144.7412ef75.chunk.js","mappings":"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","sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Avatar.js","user/components/UserItem.js","user/components/UsersList.js","user/pages/Users.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport './Avatar.css';\r\n\r\nconst Avatar = props => {\r\n  return (\r\n    <div className={`avatar ${props.className}`} style={props.style}>\r\n      <img\r\n        src={props.image}\r\n        alt={props.alt}\r\n        style={{ width: props.width, height: props.width }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Avatar from '../../shared/components/UIElements/Avatar';\r\nimport Card from '../../shared/components/UIElements/Card';\r\n\r\nimport './UserItem.css';\r\n\r\nconst UserItem = props => {\r\n  return (\r\n    <li className=\"user-item\">\r\n      <Card className=\"user-item__content\">\r\n        {/* Link to user's documents */}\r\n        <Link to={`/${props.id}/docs`}>\r\n          <div className=\"user-item__image\">\r\n            {/* User avatar */}\r\n            <Avatar image={`http://localhost:5000/${props.image}`} alt={props.name} />\r\n          </div>\r\n          <div className=\"user-item__info\">\r\n            <h2>{props.name}</h2>\r\n            <h3>\r\n              {/* Display the number of documents */}\r\n              {props.docCount} {props.docCount === 1 ? 'Place' : 'Places'}\r\n            </h3>\r\n          </div>\r\n        </Link>\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default UserItem;\r\n","import React from 'react';\r\n\r\nimport UserItem from './UserItem';\r\nimport './UsersList.css';\r\n\r\nconst UsersList = props => {\r\n  // Check if there are no users\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"center\">\r\n        <h2>No users found.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render the list of users\r\n  return (\r\n    <ul className=\"users-list\">\r\n      {props.items.map(user => (\r\n        <UserItem\r\n          key={user.id}\r\n          id={user.id}\r\n          image={user.image}\r\n          name={user.name}\r\n          docCount={user.docs.length}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport UsersList from '../components/UsersList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst Users = () => {\r\n  // Custom HTTP hook for making API requests\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedUsers, setLoadedUsers] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        // Send a GET request to fetch users from the API\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users`\r\n        );\r\n\r\n        // Update the state with the fetched users\r\n        setLoadedUsers(responseData.users);\r\n      } catch (err) {\r\n        // Handle any errors that occur during the request\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n  }, [sendRequest]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* Display an error modal if there is an error */}\r\n      <ErrorModal error={error} onClear={clearError} />\r\n\r\n      {/* Display a loading spinner while the request is in progress */}\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n\r\n      {/* Display the list of users if they are loaded */}\r\n      {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"names":["props","_jsx","className","concat","style","children","src","image","alt","width","height","Card","_jsxs","Link","to","id","Avatar","name","docCount","items","length","map","user","UserItem","docs","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useState","useState","_useState2","_slicedToArray","loadedUsers","setLoadedUsers","useEffect","fetchUsers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","wrap","_context","prev","next","process","sent","users","t0","stop","apply","arguments","React","ErrorModal","onClear","LoadingSpinner","UsersList"],"sourceRoot":""}